<template>
  <div class="recorder-view">
    <div class="pin-floating">
      <button 
        @click="showPinOptions = true" 
        class="pin-button" 
        :class="{ 'pinned': isPinned }"
      >
        <div class="button-icon">📌</div>
        <div class="button-text">{{ isPinned ? '已固定' : '固定到页面' }}</div>
      </button>
    </div>

    <!-- 固定方式选择对话框 -->
    <div v-if="showPinOptions" class="pin-options-overlay" @click="showPinOptions = false">
      <div class="pin-options-dialog" @click.stop>
        <div class="dialog-header">
          <h3>选择固定方式</h3>
          <button @click="showPinOptions = false" class="close-btn">×</button>
        </div>
        <div class="dialog-content">
          <div class="pin-option" @click="pinToPage('dock')">
            <div class="option-icon">📱</div>
            <div class="option-text">
              <h4>右侧停靠</h4>
              <p>固定在页面右侧，高度撑满窗口</p>
            </div>
          </div>
          <div class="pin-option" @click="pinToPage('window')">
            <div class="option-icon">🪟</div>
            <div class="option-text">
              <h4>浮动窗口</h4>
              <p>在页面右上角显示小窗口</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- 录音状态区域 -->
    <div class="recording-status-card">
      <div class="time-display">
        <div class="time-value">{{ store.formattedRecordingTime }}</div>
        <div class="time-label">录音时长</div>
      </div>
      
      <div class="audio-visualizer">
        <canvas ref="vizCanvas" class="spectrum-canvas" width="280" height="60"></canvas>
        <div class="level-indicator">
          <div class="level-bar" :style="{ width: Math.round(level * 100) + '%' }"></div>
        </div>
      </div>
    </div>

    <!-- 输入源选择 -->
    <div class="input-source-section">
      <h3 class="section-title">音频输入源</h3>
      <div class="source-toggle-group">
        <button 
          class="source-btn" 
          :class="{ active: store.settings.inputSource === 'mic' }" 
          @click="setSource('mic')"
        >
          <div class="source-icon">🎤</div>
          <div class="source-label">麦克风</div>
        </button>
        <button 
          class="source-btn" 
          :class="{ active: store.settings.inputSource === 'mix' }" 
          @click="setSource('mix')"
        >
          <div class="source-icon">🎚️</div>
          <div class="source-label">混音</div>
        </button>
        <button 
          class="source-btn" 
          :class="{ active: store.settings.inputSource === 'tab' }" 
          @click="setSource('tab')"
        >
          <div class="source-icon">🖥️</div>
          <div class="source-label">标签页</div>
        </button>
      </div>
    </div>

    <!-- 音频控制 -->
    <div class="audio-controls-section">
      <h3 class="section-title">音频处理</h3>
      <div class="controls-grid">
        <label class="control-item">
          <input 
            type="checkbox" 
            :checked="store.settings.echoCancellation" 
            @change="updateSetting('echoCancellation', $event.target.checked)"
            class="control-checkbox"
          >
          <span class="control-label">回声消除</span>
        </label>
        <label class="control-item">
          <input 
            type="checkbox" 
            :checked="store.settings.noiseSuppression" 
            @change="updateSetting('noiseSuppression', $event.target.checked)"
            class="control-checkbox"
          >
          <span class="control-label">降噪</span>
        </label>
        <label class="control-item">
          <input 
            type="checkbox" 
            :checked="store.settings.autoGainControl" 
            @change="updateSetting('autoGainControl', $event.target.checked)"
            class="control-checkbox"
          >
          <span class="control-label">自动增益</span>
        </label>
      </div>
      
      <div class="gain-control">
        <div class="gain-label">输入增益</div>
        <div class="gain-slider-container">
          <input 
            class="gain-slider" 
            type="range" 
            min="0" 
            max="3" 
            step="0.1" 
            :value="store.settings.gain" 
            @input="updateSetting('gain', Number($event.target.value))"
          >
          <div class="gain-value">{{ store.settings.gain.toFixed(1) }}x</div>
        </div>
      </div>
    </div>

    <!-- 主要操作按钮 -->
    <div class="main-actions">
      <button 
        @click="toggleRecording" 
        :disabled="isProcessing" 
        class="record-button" 
        :class="{ 
          'recording': store.isRecording && !store.isPaused, 
          'paused': store.isPaused,
          'processing': isProcessing
        }"
      >
        <div class="button-icon">
          <div v-if="!store.isRecording" class="mic-icon">🎤</div>
          <div v-else-if="store.isPaused" class="play-icon">▶</div>
          <div v-else class="stop-icon">⏹</div>
        </div>
        <div class="button-text">
          <span v-if="!store.isRecording">开始录音</span>
          <span v-else-if="store.isPaused">继续录音</span>
          <span v-else>停止录音</span>
        </div>
      </button>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onUnmounted, nextTick } from 'vue'
import { useRecorderStore } from '../store'
import SimpleRecorder from '../../utils/simpleRecorder'

const store = useRecorderStore()
const recorder = new SimpleRecorder()

const isProcessing = ref(false)
const recordingTimer = ref(null)
const level = ref(0)
const vizCanvas = ref(null)
let vizRaf = null
const isPinned = ref(false)
const showPinOptions = ref(false)

function setSource(src) { store.updateSettings({ inputSource: src }) }
function updateSetting(key, val) { store.updateSettings({ [key]: val }) }

onMounted(async () => { await store.loadFromStorage() })
onUnmounted(() => { cleanup() })

async function toggleRecording() {
  if (isProcessing.value) return
  try {
    isProcessing.value = true
    if (!store.isRecording) {
      await recorder.startRecording(store.settings?.inputSource || 'mix')
      store.setRecordingState(true, false)
      startTimer()
      recorder.onLevel(v => level.value = v)
      startVisualizer()
    } else if (store.isPaused) {
      await recorder.resumeRecording()
      store.setRecordingState(true, false)
    } else {
      const audioData = await recorder.stopRecording()
      store.setRecordingState(false, false)
      store.resetRecordingTime()
      // 将数据透传给顶层（使用自定义事件）
      const ev = new CustomEvent('record-stopped', { detail: audioData })
      window.dispatchEvent(ev)
    }
  } finally { isProcessing.value = false }
}

function startTimer() {
  if (recordingTimer.value) clearInterval(recordingTimer.value)
  recordingTimer.value = setInterval(() => {
    if (!store.isPaused) store.updateRecordingTime(store.recordingTime + 1)
  }, 1000)
}

function startVisualizer() {
  stopVisualizer()
  const canvas = vizCanvas.value
  if (!canvas || !recorder.analyser) return
  const ctx = canvas.getContext('2d')
  const analyser = recorder.analyser
  const bufferLength = analyser.frequencyBinCount
  const dataArray = new Uint8Array(bufferLength)
  const bars = 32
  const gap = 3
  const draw = () => {
    analyser.getByteFrequencyData(dataArray)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    const barWidth = (canvas.width - (bars - 1) * gap) / bars
    for (let i = 0; i < bars; i++) {
      const idx = Math.floor(i * (bufferLength / bars))
      const v = dataArray[idx] / 255
      const h = Math.max(2, v * canvas.height)
      const x = i * (barWidth + gap)
      const y = canvas.height - h
      const grd = ctx.createLinearGradient(0, y, 0, canvas.height)
      grd.addColorStop(0, '#55efc4')
      grd.addColorStop(1, '#ff7675')
      ctx.fillStyle = grd
      ctx.fillRect(x, y, barWidth, h)
    }
    vizRaf = requestAnimationFrame(draw)
  }
  vizRaf = requestAnimationFrame(draw)
}

function stopVisualizer() { if (vizRaf) { cancelAnimationFrame(vizRaf); vizRaf = null } }
function cleanup() { stopVisualizer(); recorder.cleanup() }

// 固定到页面：在当前页右上角注入浮动窗（iframe 指向 popup.html）
async function pinToPage(mode = 'dock') {
  try {
    showPinOptions.value = false
    
    if (!chrome?.tabs || !chrome?.scripting) throw new Error('需要 tabs/scripting 权限')
    const [tab] = await chrome.tabs.query({ active: true, currentWindow: true })
    if (!tab?.id) throw new Error('未找到活动标签页')

    const url = tab.url || ''
    const isHttp = /^https?:\/\//i.test(url)
    const isFile = /^file:\/\//i.test(url)
    const isForbidden = /^(chrome|edge|brave|opera):\/\//i.test(url) || /^chrome-devtools:\/\//i.test(url) || /^chrome-extension:\/\//i.test(url)

    // 对 chrome://、devtools、扩展页等受限页面，无法注入，给出友好提示并回退为新窗口
    if (isForbidden || (!isHttp && !isFile)) {
      if (chrome?.windows?.create) {
        chrome.windows.create({ url: chrome.runtime.getURL('popup.html'), type: 'popup', focused: true, width: 360, height: 600 })
        return
      }
      throw new Error('当前页面不可注入，请在普通网页（http/https）中使用')
    }

    // 文件协议需用户在扩展管理页开启"允许访问文件网址"，否则也回退到新窗口
    if (isFile && !(chrome?.extension?.isAllowedFileSchemeAccess && chrome.extension.isAllowedFileSchemeAccess())) {
      if (chrome?.windows?.create) {
        chrome.windows.create({ url: chrome.runtime.getURL('popup.html'), type: 'popup', focused: true, width: 360, height: 600 })
        return
      }
    }

    const popupUrl = chrome.runtime.getURL('popup.html')
    await chrome.scripting.executeScript({
      target: { tabId: tab.id },
      func: mode === 'dock' ? injectFloatingDock : injectFloatingWindow,
      args: [popupUrl]
    })
    isPinned.value = true
  } catch (e) {
    console.error('固定到页面失败:', e)
    alert('固定到页面失败: ' + (e?.message || e))
  }
}

// 注入到页面环境执行 - 右侧停靠模式
function injectFloatingDock(popupUrl) {
  try {
    const existing = document.getElementById('voice-recorder-floating-dock')
    if (existing) {
      existing.style.display = existing.style.display === 'none' ? 'block' : 'none'
      return
    }
    // Dock 容器（固定在页面右侧，充满高度）
    const dock = document.createElement('div')
    dock.id = 'voice-recorder-floating-dock'
    Object.assign(dock.style, {
      position: 'fixed',
      top: '0',
      right: '0',
      width: '360px',
      height: '100vh',
      background: 'transparent',
      zIndex: '2147483647',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'stretch',
      boxShadow: '0 0 24px rgba(0,0,0,0.18)'
    })
    
    // 工具栏（关闭按钮）
    const toolbar = document.createElement('div')
    Object.assign(toolbar.style, {
      height: '36px',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'flex-end',
      background: 'linear-gradient(135deg,#667eea,#764ba2)',
      padding: '0 8px'
    })
    const closeBtn = document.createElement('button')
    closeBtn.textContent = '×'
    Object.assign(closeBtn.style, {
      width: '28px', height: '28px',
      border: 'none', borderRadius: '6px',
      background: 'rgba(255,255,255,.2)', color: '#fff',
      cursor: 'pointer', fontSize: '18px'
    })
    closeBtn.onclick = () => { try { dock.remove() } catch {} }
    toolbar.appendChild(closeBtn)

    // iframe 内容
    const frame = document.createElement('iframe')
    frame.src = popupUrl
    Object.assign(frame.style, {
      flex: '1 1 auto',
      border: 'none',
      width: '100%'
    })

    dock.appendChild(toolbar)
    dock.appendChild(frame)
    document.body.appendChild(dock)
  } catch (err) {
    console.error('注入停靠窗失败:', err)
  }
}

// 注入到页面环境执行 - 浮动窗口模式
function injectFloatingWindow(popupUrl) {
  try {
    const existing = document.getElementById('voice-recorder-floating-window')
    if (existing) {
      existing.style.display = existing.style.display === 'none' ? 'block' : 'none'
      return
    }
    const frame = document.createElement('iframe')
    frame.id = 'voice-recorder-floating-window'
    frame.src = popupUrl
    Object.assign(frame.style, {
      position: 'fixed',
      top: '16px',
      right: '16px',
      width: '320px',
      height: '520px',
      border: 'none',
      borderRadius: '12px',
      boxShadow: '0 12px 32px rgba(0,0,0,0.25)',
      zIndex: '2147483647',
      background: 'white'
    })
    document.body.appendChild(frame)

    const closeBtn = document.createElement('button')
    closeBtn.id = 'voice-recorder-floating-close'
    closeBtn.textContent = '×'
    Object.assign(closeBtn.style, {
      position: 'fixed',
      top: '8px',
      right: '8px',
      width: '28px',
      height: '28px',
      border: 'none',
      borderRadius: '14px',
      background: '#e74c3c',
      color: '#fff',
      cursor: 'pointer',
      zIndex: '2147483647',
      lineHeight: '28px',
      fontSize: '18px',
      textAlign: 'center'
    })
    closeBtn.onclick = () => {
      try { frame.remove(); closeBtn.remove() } catch {}
    }
    document.body.appendChild(closeBtn)
  } catch (err) {
    console.error('注入浮动窗失败:', err)
  }
}

<style scoped>
.recorder-view {
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  color: #333;
  position: relative;
}

.pin-floating {
  position: absolute;
  top: 8px;
  right: 8px;
  z-index: 5;
}

.pin-floating .pin-button {
  padding: 8px 12px;
  font-size: 0.78rem;
}

/* 录音状态卡片 */
.recording-status-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 20px;
  padding: 24px;
  margin-bottom: 24px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.time-display {
  text-align: center;
  margin-bottom: 20px;
}

.time-value {
  font-size: 2rem;
  font-weight: 700;
  color: #2d3748;
  margin-bottom: 4px;
  font-family: 'SF Mono', 'Monaco', 'Inconsolata', monospace;
}

.time-label {
  font-size: 0.875rem;
  color: #718096;
  font-weight: 500;
}

.audio-visualizer {
  position: relative;
}

.spectrum-canvas {
  width: 100%;
  height: 48px;
  border-radius: 12px;
  background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
  border: 1px solid #e2e8f0;
}

.level-indicator {
  position: absolute;
  bottom: 8px;
  left: 8px;
  right: 8px;
  height: 4px;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 2px;
  overflow: hidden;
}

.level-bar {
  height: 100%;
  background: linear-gradient(90deg, #48bb78 0%, #38a169 100%);
  border-radius: 2px;
  transition: width 0.1s ease;
}

/* 输入源选择 */
.input-source-section {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.section-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #2d3748;
  margin: 0 0 16px 0;
}

.source-toggle-group {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 12px;
}

.source-btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 16px 12px;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  background: #ffffff;
  cursor: pointer;
  transition: all 0.2s ease;
  font-family: inherit;
}

.source-btn:hover {
  border-color: #cbd5e0;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.source-btn.active {
  border-color: #667eea;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
}

.source-icon {
  font-size: 1.5rem;
  margin-bottom: 8px;
}

.source-label {
  font-size: 0.875rem;
  font-weight: 500;
}

/* 音频控制 */
.audio-controls-section {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.controls-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 16px;
  margin-bottom: 20px;
}

.control-item {
  display: flex;
  align-items: center;
  cursor: pointer;
  padding: 8px;
  border-radius: 8px;
  transition: background-color 0.2s ease;
}

.control-item:hover {
  background: #f7fafc;
}

.control-checkbox {
  width: 18px;
  height: 18px;
  margin-right: 8px;
  accent-color: #667eea;
  cursor: pointer;
}

.control-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #4a5568;
}

.gain-control {
  margin-top: 16px;
}

.gain-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 8px;
}

.gain-slider-container {
  display: flex;
  align-items: center;
  gap: 12px;
}

.gain-slider {
  flex: 1;
  height: 6px;
  border-radius: 3px;
  background: #e2e8f0;
  outline: none;
  cursor: pointer;
  -webkit-appearance: none;
}

.gain-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  cursor: pointer;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
}

.gain-slider::-moz-range-thumb {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  cursor: pointer;
  border: none;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
}

.gain-value {
  font-size: 0.875rem;
  font-weight: 600;
  color: #2d3748;
  min-width: 40px;
  text-align: center;
  background: #f7fafc;
  padding: 4px 8px;
  border-radius: 6px;
}

/* 主要操作按钮 */
.main-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.record-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 12px;
  padding: 12px 18px;
  border: none;
  border-radius: 16px;
  font-size: 0.95rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
  color: white;
  box-shadow: 0 4px 16px rgba(72, 187, 120, 0.3);
  min-height: 48px;
}

.record-button:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(72, 187, 120, 0.4);
}

.record-button.recording {
  background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);
  box-shadow: 0 4px 16px rgba(245, 101, 101, 0.3);
  animation: pulse 2s infinite;
}

.record-button.paused {
  background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
  box-shadow: 0 4px 16px rgba(237, 137, 54, 0.3);
}

.record-button.processing {
  opacity: 0.7;
  cursor: not-allowed;
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.02); }
}

.button-icon {
  font-size: 1.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.button-text {
  font-weight: 600;
}

.pin-button {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 10px 16px;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  color: #4a5568;
  font-size: 0.82rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.pin-button:hover {
  border-color: #cbd5e0;
  background: #ffffff;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.pin-button.pinned {
  border-color: #667eea;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
}

/* 响应式设计 */
@media (max-width: 320px) {
  .recorder-view {
    padding: 16px;
  }
  
  .time-value {
    font-size: 2rem;
  }
  
  .controls-grid {
    grid-template-columns: 1fr;
  }
  
  .source-toggle-group {
    grid-template-columns: 1fr;
  }
}

/* 固定方式选择对话框样式 */
.pin-options-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.pin-options-dialog {
  background: white;
  border-radius: 16px;
  padding: 0;
  max-width: 400px;
  width: 90%;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.dialog-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 20px 24px;
  border-bottom: 1px solid #e2e8f0;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.dialog-header h3 {
  margin: 0;
  font-size: 1.125rem;
  font-weight: 600;
}

.close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 24px;
  cursor: pointer;
  padding: 0;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
  transition: background-color 0.2s;
}

.close-btn:hover {
  background: rgba(255, 255, 255, 0.2);
}

.dialog-content {
  padding: 20px 24px;
}

.pin-option {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 16px;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-bottom: 12px;
}

.pin-option:last-child {
  margin-bottom: 0;
}

.pin-option:hover {
  border-color: #667eea;
  background: #f7fafc;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.option-icon {
  font-size: 2rem;
  width: 48px;
  height: 48px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 12px;
  color: white;
  flex-shrink: 0;
}

.option-text {
  flex: 1;
}

.option-text h4 {
  margin: 0 0 4px 0;
  font-size: 1rem;
  font-weight: 600;
  color: #2d3748;
}

.option-text p {
  margin: 0;
  font-size: 0.875rem;
  color: #718096;
  line-height: 1.4;
}
</style>

